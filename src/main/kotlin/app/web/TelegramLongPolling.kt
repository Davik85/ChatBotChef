package app.web

import app.AppConfig
import app.db.AdminAuditRepo
import app.db.AudienceRepo
import app.db.ChatHistoryRepo
import app.db.MessagesRepo
import app.db.PremiumRepo
import app.db.ProcessedUpdatesRepo
import app.db.UserRegistry
import app.db.UsersRepo
import app.llm.OpenAIClient
import app.llm.dto.ChatMessage
import app.logic.CalorieCalculatorPrompt
import app.logic.PersonaPrompt
import app.logic.ProductInfoPrompt
import app.pay.PaymentService
import app.pay.ReceiptBuilder
import app.notify.ReminderJob
import app.web.dto.InlineKeyboardButton
import app.web.dto.InlineKeyboardMarkup
import app.web.dto.TgCallbackQuery
import app.web.dto.TgUpdate
import app.web.dto.*
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import app.logic.RateLimiter
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.util.ArrayDeque
import kotlin.jvm.Volatile

class TelegramLongPolling(
    private val token: String,
    private val llm: OpenAIClient
) {
    private val api = TelegramApi(token)

    private val mode = mutableMapOf<Long, PersonaMode>()
    private val state = mutableMapOf<Long, BotState>()
    private val adminStates = mutableMapOf<Long, AdminState>()
    @Volatile
    private var broadcastJob: Job? = null
    private val broadcastMutex = Any()

    private enum class PersonaMode { CHEF, CALC, PRODUCT }
    private enum class BotState { AWAITING_CALORIE_INPUT, AWAITING_PRODUCT_INPUT }

    private sealed class AdminState {
        object AwaitingBroadcastText : AdminState()
        data class AwaitingConfirmation(val text: String) : AdminState()
        object AwaitingUserIdForStatus : AdminState()
        object AwaitingGrantParams : AdminState()
    }

    private enum class BroadcastResult { SENT, BLOCKED, FAILED }

    private data class AdminStatsSnapshot(
        val total: Long,
        val activeInstalls: Long,
        val blocked: Long,
        val premium: Long,
        val active7d: Long,
    )

    private companion object {
        private const val CB_RECIPES = "menu_recipes"
        private const val CB_CALC = "menu_calc"
        private const val CB_PRODUCT = "menu_product"
        private const val CB_HELP = "menu_help"
        private const val CB_ADMIN_BROADCAST = "admin_broadcast"
        private const val CB_ADMIN_STATS = "admin_stats"
        private const val CB_ADMIN_CONFIRM = "admin_broadcast_confirm"
        private const val CB_ADMIN_CANCEL = "admin_broadcast_cancel"
        private const val CB_ADMIN_USER_STATUS = "admin_user_status"
        private const val CB_ADMIN_GRANT = "admin_grant"
        private const val ADMIN_GRANT_USAGE = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <tgId> <days> (–æ–±–∞ —á–∏—Å–ª–∞). –ü—Ä–∏–º–µ—Ä: 6859850730 30"
        private const val ADMIN_GRANT_COMMAND_USAGE = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grantpremium <tgId> <days>. –ü—Ä–∏–º–µ—Ä: /grantpremium 6859850730 30"
        private const val ADMIN_STATUS_COMMAND_USAGE = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /premiumstatus <tgId>"
        private const val MAX_BROADCAST_CHARS = 2000
        private const val ACTIVITY_MAX_CHARS = 3800
        private const val BROADCAST_RATE_DELAY_MS = 250L
        private const val BROADCAST_BATCH_SIZE = 500
        private const val DAY_MS = 24L * 60L * 60L * 1000L
        private val NON_TEXT_REPLY = "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
        private const val MAX_USER_MESSAGE_CHARS = 3500
        private val TOO_LONG_REPLY =
            "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑."

        private val START_GREETING_RU = """
            –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üëã –Ø –®–µ—Ñ-–ü–æ–≤–∞—Ä-–ë–æ—Ç, –∏ —è –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –∫—É—Ö–Ω–µ!
            –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–∞–º –Ω—É–∂–Ω—ã —Å–µ–≥–æ–¥–Ω—è?üìå
            
            –†–µ–∂–∏–º—ã:
            
            ‚ú® –†–µ—Ü–µ–ø—Ç—ã ‚Äî —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
            üîç –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à—É –Ω–æ—Ä–º—É –ö–ë–ñ–£ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
            ü•ó –ö–ë–ñ–£ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
        """.trimIndent()

        private val CALORIE_INPUT_PROMPT = """
            üßÆ –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –ø–∏—Ç–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
            
            –í–∞—à –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç (—Å–º), –≤–µ—Å (–∫–≥), –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (–ø–∞—Å—Å–∏–≤–Ω—ã–π/–∞–∫—Ç–∏–≤–Ω—ã–π), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é, —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É).
            
            –ü—Ä–∏–º–µ—Ä:¬´–ú—É–∂—á–∏–Ω–∞, 40 –ª–µ—Ç, 175 —Å–º, 80 –∫–≥, –∞–∫—Ç–∏–≤–Ω—ã–π, 9000 —à–∞–≥–æ–≤, 4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é, —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å¬ª.
            
            ‚ù§Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /start.

        """.trimIndent()

        private val PRODUCT_INPUT_PROMPT = """
            üç∞ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: —á–∞—Å—Ç—å, –∂–∏—Ä–Ω–æ—Å—Ç—å, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
           
            –ü—Ä–∏–º–µ—Ä—ã:
           
            ‚Äî —Å–≤–∏–Ω–∏–Ω–∞ —à–µ—è
            ‚Äî –ª–æ—Å–æ—Å—å —Å—ã—Ä–æ–π
            ‚Äî –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –±–µ–∑ –∫–æ–∂–∏
            ‚Äî —Ä–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π
            ‚Äî —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞
           
            ‚òù–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start!
        """.trimIndent()

        private val CHEF_INPUT_PROMPT = """
            –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:
            
            –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–û–±–µ–¥, –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –±—Ä–æ–∫–∫–æ–ª–∏, –ø–∞—Ä–æ–≤–∞—Ä–∫–∞¬ª
            –ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä—è–º–æ: ¬´–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫—É—Ä–∏—Ü—ã –∏ —Ä–∏—Å–∞ –Ω–∞ –æ–±–µ–¥? –Ø –Ω–∞ –¥–∏–µ—Ç–µ, —Ö—É–¥–µ—é.¬ª
           
            üí¨  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start.
        """.trimIndent()

        private val HELP_TEXT = """
            üí° –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ —Ñ–∏—à–∫–∏ —Å–ø—Ä—è—Ç–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –í—Å—ë –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ!

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            ‚ú® /recipes ‚Äî –ü–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
            ‚öñÔ∏è /caloriecalculator ‚Äî –†–∞—Å—Å—á–∏—Ç–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π
            üßÇ /productinfo ‚Äî –£–∑–Ω–∞–π –ö–ë–ñ–£ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            üéØ /start ‚Äî –û—Ç–∫—Ä–æ—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            üîÑ /reset ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            
            –í —Å–ª—É—á–∞–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –ø–æ—á—Ç–µ. 
            –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫, —Å–≤–æ–π ID (–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /whoami –≤ –±–æ—Ç) –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.

            –°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞: http://ai-chef.tilda.ws/
            –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: https://ai-chef.tilda.ws/policy
            –û—Ñ–µ—Ä—Ç–∞: https://ai-chef.tilda.ws/oferta
            –ü–æ—á—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ai.chef@yandex.ru
        """.trimIndent()

        private const val START_IMAGE_RES = "welcome/start.jpg"

        private val ADMIN_IDS: Set<Long> =
            (System.getenv("ADMIN_IDS") ?: "")
                .split(",").mapNotNull { it.trim().toLongOrNull() }.toSet()

        private val dtf: DateTimeFormatter =
            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm").withZone(ZoneId.systemDefault())

        private val CTRL_REGEX = Regex("[\\u0000-\\u001F\\u007F\\u00A0\\u2000-\\u200B\\u202F\\u205F\\u3000]")
    }

    private fun isAdmin(userId: Long): Boolean = ADMIN_IDS.contains(userId)

    private fun PersonaMode.modeKey(): String = when (this) {
        PersonaMode.CHEF -> "CHEF"
        PersonaMode.CALC -> "CALC"
        PersonaMode.PRODUCT -> "PRODUCT"
    }

    private fun currentMode(chatId: Long): PersonaMode = mode[chatId] ?: PersonaMode.CHEF

    private fun prepareForHistory(raw: String): String {
        if (raw.isEmpty()) return raw
        var value = raw.replace("\r", " ").replace("\n", " ")
        value = CTRL_REGEX.replace(value, "")
        if (value.length > AppConfig.HISTORY_MAX_CHARS_PER_MSG) {
            value = value.take(AppConfig.HISTORY_MAX_CHARS_PER_MSG)
        }
        return value.trim()
    }

    private fun sanitizeActivityText(raw: String): String? {
        var value = raw.replace("\r", " ").replace("\n", " ")
        value = CTRL_REGEX.replace(value, "")
        value = value.trim()
        if (value.isEmpty()) return null
        if (value.length > ACTIVITY_MAX_CHARS) {
            value = value.take(ACTIVITY_MAX_CHARS)
        }
        return value
    }

    private fun sanitizeAdminInput(raw: String, maxChars: Int = MAX_BROADCAST_CHARS): String {
        var value = raw.replace("\r", " ").replace("\n", " ")
        value = CTRL_REGEX.replace(value, "")
        if (value.length > maxChars) {
            value = value.take(maxChars)
        }
        return value.trim()
    }

    private fun parseTelegramId(raw: String?): Long? {
        if (raw.isNullOrBlank()) return null
        val normalized = raw.trim().removePrefix("+").replace("\\s+".toRegex(), "")
        if (normalized.isEmpty()) return null
        if (normalized.any { !it.isDigit() }) return null
        return normalized.toLongOrNull()
    }

    private fun parsePositiveDays(raw: String?): Int? {
        if (raw.isNullOrBlank()) return null
        val normalized = raw.trim()
        val value = normalized.toIntOrNull() ?: return null
        return value.takeIf { it > 0 }
    }

    private fun buildHistoryMessages(userId: Long, personaMode: PersonaMode): List<ChatMessage> {
        val items = ChatHistoryRepo.fetchLast(userId, personaMode.modeKey(), AppConfig.HISTORY_MAX_TURNS)
        if (items.isEmpty()) return emptyList()

        val deque = ArrayDeque<Pair<ChatMessage, Int>>()
        var total = 0
        for (item in items) {
            val sanitized = prepareForHistory(item.text)
            if (sanitized.isEmpty()) continue
            val message = ChatMessage(item.role, sanitized)
            deque.addLast(message to sanitized.length)
            total += sanitized.length
            while (total > AppConfig.HISTORY_MAX_TOTAL_CHARS && deque.isNotEmpty()) {
                val removed = deque.removeFirst()
                total -= removed.second
            }
        }
        return deque.map { it.first }
    }

    private fun clearAllHistory(userId: Long) {
        PersonaMode.values().forEach { persona ->
            ChatHistoryRepo.clear(userId, persona.modeKey())
        }
    }

    private fun upsertUser(from: TgUser?, source: String) {
        val user = from ?: return
        val now = System.currentTimeMillis()
        runCatching { UserRegistry.upsert(user, now) }
            .onSuccess { inserted ->
                val insertedFlag = if (inserted) 1 else 0
                println("DB-USERS-UPSERT: id=${user.id} source=$source inserted=$insertedFlag")
            }
            .onFailure {
                println("DB-USERS-UPSERT-ERR: id=${user.id} source=$source reason=${it.message}")
            }
    }

    suspend fun run() {
        require(api.getMe()) { "Telegram getMe failed" }
        GlobalScope.launch { ReminderJob(api).runForever() }
        var offset: Long? = null

        while (true) {
            try {
                val updates: List<TgUpdate> = api.getUpdates(offset)
                if (updates.isEmpty()) { delay(1200); continue }

                for (u in updates) {
                    offset = u.update_id + 1

                    if (!ProcessedUpdatesRepo.markProcessed(u.update_id)) {
                        println("TG-POLL-SKIP: update=${u.update_id} reason=duplicate")
                        continue
                    }

                    u.message?.from?.let { upsertUser(it, "message") }
                    u.edited_message?.from?.let { upsertUser(it, "message") }
                    u.callback_query?.let { upsertUser(it.from, "callback") }
                    u.pre_checkout_query?.let { upsertUser(it.from, "precheckout") }
                    u.my_chat_member?.from?.let { upsertUser(it, "chat_member") }
                    u.chat_member?.from?.let { upsertUser(it, "chat_member") }

                    val pcq = u.pre_checkout_query
                    if (pcq != null) {
                        handlePreCheckout(pcq); continue
                    }

                    val cb: TgCallbackQuery? = u.callback_query
                    if (cb != null) {
                        handleCallback(cb); continue
                    }

                    val msg = u.message ?: u.edited_message ?: continue

                    val sp = msg.successful_payment
                    if (sp != null) {
                        upsertUser(msg.from, "payment")
                        handleSuccessfulPayment(msg); continue
                    }

                    route(msg)
                }
            } catch (t: Throwable) {
                println("TG-POLL-ERR: ${t.message}")
                delay(1500)
            }
        }
    }

    // ===== Payments =====

    private fun handlePreCheckout(q: TgPreCheckoutQuery) {
        trackUserActivity(q.from.id, "[pre_checkout] ${q.invoice_payload ?: ""}")
        val validation = PaymentService.validatePreCheckout(q)
        if (!validation.ok) {
            api.answerPreCheckoutQuery(q.id, ok = false, errorMessage = validation.errorMessage)
            return
        }
        api.answerPreCheckoutQuery(q.id, ok = true)
    }

    private fun handleSuccessfulPayment(msg: TgMessage) {
        val chatId = msg.chat.id
        val payment = msg.successful_payment ?: return
        val payerId = msg.from?.id ?: chatId
        val paymentId = payment.provider_payment_charge_id ?: payment.telegram_payment_charge_id ?: ""
        trackUserActivity(payerId, "[payment_success] $paymentId", role = "system")
        val recorded = PaymentService.handleSuccessfulPayment(chatId, payment)
        if (!recorded) {
            api.sendMessage(chatId, "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
            return
        }
        PremiumRepo.grantDays(chatId, AppConfig.premiumDays)
        val until = PremiumRepo.getUntil(chatId)
        val untilStr = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
        api.sendMessage(chatId, "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: $untilStr")
    }

    private fun sendTelegramInvoice(chatId: Long): Boolean {
        if (!PaymentService.paymentsAvailable) {
            api.sendMessage(chatId, PaymentService.paymentsDisabledMessage)
            return false
        }
        val providerToken = AppConfig.providerToken
        if (providerToken.isNullOrBlank()) {
            api.sendMessage(chatId, PaymentService.paymentsDisabledMessage)
            return false
        }
        val title = "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –Ω–∞ ${AppConfig.premiumDays} –¥–Ω–µ–π"
        val desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        val prices = listOf(TgLabeledPrice(label = "–ü–æ–¥–ø–∏—Å–∫–∞", amount = AppConfig.premiumPriceRub * 100))
        val payload = PaymentService.newInvoicePayload(chatId)
        PaymentService.registerInvoice(payload, chatId)
        val providerData = ReceiptBuilder.providerDataForSubscription(AppConfig.premiumPriceRub, title)
        val sent = api.sendInvoice(
            chatId = chatId,
            title = title,
            description = desc,
            payload = payload,
            providerToken = providerToken,
            currency = "RUB",
            prices = prices,
            needEmail = AppConfig.requireEmailForReceipt,
            needPhone = AppConfig.requirePhoneForReceipt,
            sendEmailToProvider = AppConfig.requireEmailForReceipt,
            sendPhoneToProvider = AppConfig.requirePhoneForReceipt,
            providerData = providerData
        )
        if (!sent) {
            PaymentService.markInvoiceFailure(payload, "send_invoice_failed")
        }
        return sent
    }

    // ===== Callback =====

    private fun handleCallback(cb: TgCallbackQuery) {
        val chatId = cb.message?.chat?.id ?: return
        val msgId = cb.message.message_id
        val userId = cb.from.id

        trackUserActivity(userId, "[callback] ${cb.data.orEmpty()}")

        when (cb.data) {
            CB_RECIPES -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                ChatHistoryRepo.clear(userId, PersonaMode.CHEF.modeKey())
                api.sendMessage(chatId, CHEF_INPUT_PROMPT)
            }
            CB_CALC -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.CALC
                state[chatId] = BotState.AWAITING_CALORIE_INPUT
                ChatHistoryRepo.clear(userId, PersonaMode.CALC.modeKey())
                api.sendMessage(chatId, CALORIE_INPUT_PROMPT)
            }
            CB_PRODUCT -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.PRODUCT
                state[chatId] = BotState.AWAITING_PRODUCT_INPUT
                ChatHistoryRepo.clear(userId, PersonaMode.PRODUCT.modeKey())
                api.sendMessage(chatId, PRODUCT_INPUT_PROMPT)
            }
            CB_HELP -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                api.sendMessage(chatId, HELP_TEXT)
            }
            CB_ADMIN_BROADCAST -> {
                api.answerCallback(cb.id)
                if (!isAdmin(userId)) {
                    api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                    return
                }
                println("ADMIN-AUDIT: action=broadcast_prompt chat=$chatId user=$userId source=menu")
                AdminAuditRepo.record(userId, action = "broadcast_prompt", target = chatId.toString(), meta = "source=menu")
                adminStates[chatId] = AdminState.AwaitingBroadcastText
                api.sendMessage(chatId, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parseMode = null)
            }
            CB_ADMIN_STATS -> {
                api.answerCallback(cb.id)
                if (!isAdmin(userId)) {
                    api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                    return
                }
                println("ADMIN-AUDIT: action=stats_request chat=$chatId user=$userId source=menu")
                AdminAuditRepo.record(userId, action = "stats_request", target = chatId.toString(), meta = "source=menu")
                sendAdminStats(chatId)
            }
            CB_ADMIN_USER_STATUS -> {
                api.answerCallback(cb.id)
                if (!isAdmin(userId)) {
                    api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                    return
                }
                println("ADMIN-AUDIT: action=status_prompt chat=$chatId user=$userId source=menu")
                AdminAuditRepo.record(userId, action = "status_prompt", target = chatId.toString(), meta = "source=menu")
                adminStates[chatId] = AdminState.AwaitingUserIdForStatus
                api.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parseMode = null)
            }
            CB_ADMIN_GRANT -> {
                api.answerCallback(cb.id)
                if (!isAdmin(userId)) {
                    api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                    return
                }
                println("ADMIN-AUDIT: action=grant_prompt chat=$chatId user=$userId source=menu")
                AdminAuditRepo.record(userId, action = "grant_prompt", target = chatId.toString(), meta = "source=menu")
                adminStates[chatId] = AdminState.AwaitingGrantParams
                api.sendMessage(
                    chatId,
                    "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <tgId> <days>. –ü—Ä–∏–º–µ—Ä: 6859850730 30",
                    parseMode = null
                )
            }
            CB_ADMIN_CONFIRM -> {
                api.answerCallback(cb.id)
                if (!isAdmin(userId)) {
                    api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                    return
                }
                val prepared = adminStates[chatId]
                if (prepared is AdminState.AwaitingConfirmation) {
                    api.deleteInlineKeyboard(chatId, msgId)
                    println("ADMIN-AUDIT: action=broadcast_confirm chat=$chatId user=$userId chars=${prepared.text.length}")
                    AdminAuditRepo.record(
                        adminId = userId,
                        action = "broadcast_confirm",
                        target = chatId.toString(),
                        meta = "chars=${prepared.text.length}"
                    )
                    startBroadcast(chatId, prepared.text, userId)
                } else {
                    api.sendMessage(chatId, "–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.", parseMode = null)
                }
            }
            CB_ADMIN_CANCEL -> {
                api.answerCallback(cb.id)
                if (!isAdmin(userId)) {
                    api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                    return
                }
                api.deleteInlineKeyboard(chatId, msgId)
                if (adminStates.remove(chatId) != null) {
                    println("ADMIN-AUDIT: action=broadcast_cancel chat=$chatId user=$userId source=menu")
                    AdminAuditRepo.record(userId, action = "broadcast_cancel", target = chatId.toString(), meta = "source=menu")
                    api.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", parseMode = null)
                } else {
                    api.sendMessage(chatId, "–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.", parseMode = null)
                }
            }
            else -> api.answerCallback(cb.id)
        }
    }

    // ===== Router =====

    private fun route(msg: TgMessage) {
        val chatId = msg.chat.id
        val msgId = msg.message_id
        val userId = msg.from?.id ?: chatId

        val hasAttachments = (msg.photo?.isNotEmpty() == true) ||
            msg.document != null ||
            msg.video != null ||
            msg.video_note != null ||
            msg.voice != null ||
            msg.audio != null ||
            msg.sticker != null ||
            msg.animation != null
        if (hasAttachments) {
            api.sendMessage(chatId, NON_TEXT_REPLY)
            return
        }

        val originalText = msg.text ?: ""
        if (originalText.isBlank()) {
            api.sendMessage(chatId, NON_TEXT_REPLY)
            return
        }
        val text = originalText.trim()
        if (text.length > MAX_USER_MESSAGE_CHARS) {
            api.sendMessage(chatId, TOO_LONG_REPLY, parseMode = null)
            return
        }
        val lower = text.lowercase()

        trackUserActivity(userId, originalText)

        if (lower.startsWith("/admin")) {
            if (!isAdmin(userId)) {
                api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
            } else {
                println("ADMIN-AUDIT: action=menu_open chat=$chatId user=$userId source=command")
                AdminAuditRepo.record(userId, action = "menu_open", target = chatId.toString(), meta = "source=command")
                showAdminMenu(chatId, userId)
            }
            return
        }

        val adminState = adminStates[chatId]
        if (adminState != null) {
            if (!isAdmin(userId)) {
                adminStates.remove(chatId)
                println("ADMIN-AUDIT: action=state_force_exit chat=$chatId user=$userId reason=non_admin")
            } else {
                if (tryHandleAdminStateInput(chatId, userId, originalText)) {
                    return
                }
                adminStates.remove(chatId)
                println("ADMIN-AUDIT: action=state_exit chat=$chatId user=$userId state=$adminState reason=unhandled_input")
                AdminAuditRepo.record(
                    adminId = userId,
                    action = "state_exit",
                    target = chatId.toString(),
                    meta = "state=$adminState"
                )
            }
        }

        if (text.isBlank()) return

        if (handleAdminCommand(chatId, userId, originalText)) {
            return
        }

        // PUBLIC
        if (lower.startsWith("/whoami")) {
            api.sendMessage(chatId, "–í–∞—à Telegram ID: $userId"); return
        }
        if (lower.startsWith("/premium")) {
            val ok = sendTelegramInvoice(chatId)
            if (!ok && PaymentService.paymentsAvailable) api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        }

        when (state[chatId]) {
            BotState.AWAITING_CALORIE_INPUT ->
                if (!lower.startsWith("/")) { handleCalorieInput(chatId, userId, text); return }
            BotState.AWAITING_PRODUCT_INPUT ->
                if (!lower.startsWith("/")) { handleProductInput(chatId, userId, text); return }
            else -> {}
        }

        when (lower) {
            "/start" -> {
                api.deleteMessage(chatId, msgId)
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                clearAllHistory(userId)
                api.sendPhotoResource(chatId, START_IMAGE_RES, START_GREETING_RU, inlineMenu())
                return
            }
            "/recipes" -> {
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                ChatHistoryRepo.clear(userId, PersonaMode.CHEF.modeKey())
                api.sendMessage(chatId, CHEF_INPUT_PROMPT)
                return
            }
            "/caloriecalculator" -> {
                mode[chatId] = PersonaMode.CALC
                state[chatId] = BotState.AWAITING_CALORIE_INPUT
                ChatHistoryRepo.clear(userId, PersonaMode.CALC.modeKey())
                api.sendMessage(chatId, CALORIE_INPUT_PROMPT)
                return
            }
            "/productinfo" -> {
                mode[chatId] = PersonaMode.PRODUCT
                state[chatId] = BotState.AWAITING_PRODUCT_INPUT
                ChatHistoryRepo.clear(userId, PersonaMode.PRODUCT.modeKey())
                api.sendMessage(chatId, PRODUCT_INPUT_PROMPT)
                return
            }
            "/help" -> { api.sendMessage(chatId, HELP_TEXT); return }
            "/reset" -> {
                val current = currentMode(chatId)
                ChatHistoryRepo.clear(userId, current.modeKey())
                api.sendMessage(chatId, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
                return
            }
        }

        when (currentMode(chatId)) {
            PersonaMode.CHEF    -> handleChef(chatId, userId, text)
            PersonaMode.CALC    -> handleCalorieInput(chatId, userId, text)
            PersonaMode.PRODUCT -> handleProductInput(chatId, userId, text)
        }
    }

    private fun tryHandleAdminStateInput(chatId: Long, adminId: Long, rawInput: String): Boolean {
        val state = adminStates[chatId] ?: return false
        val trimmed = rawInput.trim()
        val lower = trimmed.lowercase()
        return when (state) {
            AdminState.AwaitingBroadcastText -> {
                if (lower == "/cancel") {
                    adminStates.remove(chatId)
                    println("ADMIN-AUDIT: action=broadcast_cancel chat=$chatId user=$adminId source=state")
                    AdminAuditRepo.record(adminId, action = "broadcast_cancel", target = chatId.toString(), meta = "source=state")
                    api.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", parseMode = null)
                    true
                } else if (trimmed.startsWith("/")) {
                    false
                } else {
                    val prepared = validateBroadcastText(chatId, rawInput)
                    if (prepared != null) {
                        adminStates[chatId] = AdminState.AwaitingConfirmation(prepared)
                        println("ADMIN-AUDIT: action=broadcast_prepared chat=$chatId user=$adminId chars=${prepared.length}")
                        AdminAuditRepo.record(
                            adminId,
                            action = "broadcast_prepared",
                            target = chatId.toString(),
                            meta = "chars=${prepared.length}"
                        )
                        api.sendMessage(
                            chatId,
                            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n$prepared",
                            replyMarkup = broadcastConfirmKeyboard(),
                            parseMode = null
                        )
                    }
                    true
                }
            }
            is AdminState.AwaitingConfirmation -> {
                if (lower == "/cancel") {
                    adminStates.remove(chatId)
                    println("ADMIN-AUDIT: action=broadcast_cancel chat=$chatId user=$adminId source=state_confirm")
                    AdminAuditRepo.record(
                        adminId,
                        action = "broadcast_cancel",
                        target = chatId.toString(),
                        meta = "source=state_confirm"
                    )
                    api.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", parseMode = null)
                    true
                } else if (trimmed.startsWith("/")) {
                    false
                } else {
                    val prepared = validateBroadcastText(chatId, rawInput)
                    if (prepared != null) {
                        adminStates[chatId] = AdminState.AwaitingConfirmation(prepared)
                        println("ADMIN-AUDIT: action=broadcast_updated chat=$chatId user=$adminId chars=${prepared.length}")
                        AdminAuditRepo.record(
                            adminId,
                            action = "broadcast_updated",
                            target = chatId.toString(),
                            meta = "chars=${prepared.length}"
                        )
                        api.sendMessage(
                            chatId,
                            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n$prepared",
                            replyMarkup = broadcastConfirmKeyboard(),
                            parseMode = null
                        )
                    }
                    true
                }
            }
            AdminState.AwaitingUserIdForStatus -> {
                if (lower == "/cancel") {
                    adminStates.remove(chatId)
                    println("ADMIN-AUDIT: action=status_cancel chat=$chatId user=$adminId")
                    AdminAuditRepo.record(adminId, action = "status_cancel", target = chatId.toString(), meta = null)
                    api.sendMessage(chatId, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parseMode = null)
                    true
                } else if (trimmed.startsWith("/")) {
                    false
                } else if (trimmed.isEmpty()) {
                    api.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parseMode = null)
                    true
                } else {
                    val targetId = parseTelegramId(trimmed)
                    if (targetId == null) {
                        println("ADMIN-STATUS: requester=$adminId raw=$trimmed source=panel result=bad_id")
                        api.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.", parseMode = null)
                        true
                    } else {
                        val handled = handlePremiumStatusLookup(
                            chatId = chatId,
                            adminId = adminId,
                            targetId = targetId,
                            source = "panel",
                            showMenuAfter = true
                        )
                        if (handled) {
                            adminStates.remove(chatId)
                        }
                        true
                    }
                }
            }
            AdminState.AwaitingGrantParams -> {
                if (lower == "/cancel") {
                    adminStates.remove(chatId)
                    println("ADMIN-AUDIT: action=grant_cancel chat=$chatId user=$adminId")
                    AdminAuditRepo.record(adminId, action = "grant_cancel", target = chatId.toString(), meta = null)
                    api.sendMessage(chatId, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parseMode = null)
                    true
                } else if (trimmed.startsWith("/")) {
                    false
                } else if (trimmed.isEmpty()) {
                    api.sendMessage(chatId, ADMIN_GRANT_USAGE, parseMode = null)
                    true
                } else {
                    val parts = trimmed.split("\\s+".toRegex(), limit = 3)
                    val targetToken = parts.getOrNull(0)
                    val daysToken = parts.getOrNull(1)
                    if (targetToken.isNullOrBlank() || daysToken.isNullOrBlank()) {
                        println("ADMIN-GRANT: requester=$adminId raw=$trimmed source=panel result=missing_args")
                        api.sendMessage(chatId, ADMIN_GRANT_USAGE, parseMode = null)
                        true
                    } else {
                        val targetId = parseTelegramId(targetToken)
                        val days = parsePositiveDays(daysToken)
                        if (targetId == null) {
                            println("ADMIN-GRANT: requester=$adminId raw=$trimmed source=panel result=bad_id")
                            api.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.", parseMode = null)
                            true
                        } else if (days == null) {
                            val isNumeric = daysToken.trim().toIntOrNull() != null
                            if (isNumeric) {
                                println("ADMIN-GRANT: requester=$adminId target=$targetId raw=$trimmed source=panel result=bad_days")
                                api.sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", parseMode = null)
                            } else {
                                println("ADMIN-GRANT: requester=$adminId raw=$trimmed source=panel result=bad_days_format")
                                api.sendMessage(chatId, ADMIN_GRANT_USAGE, parseMode = null)
                            }
                            true
                        } else {
                            val handled = handleGrantPremium(
                                chatId = chatId,
                                adminId = adminId,
                                targetId = targetId,
                                days = days,
                                source = "panel",
                                showMenuAfter = true,
                            )
                            if (handled) {
                                adminStates.remove(chatId)
                            }
                            true
                        }
                    }
                }
            }
        }
    }

    private fun handleAdminCommand(chatId: Long, userId: Long, rawInput: String): Boolean {
        val trimmed = rawInput.trim()
        if (!trimmed.startsWith("/")) return false
        val lower = trimmed.lowercase()

        if (lower.startsWith("/premiumstatus")) {
            if (!isAdmin(userId)) {
                api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                return true
            }
            val parts = trimmed.split("\\s+".toRegex(), limit = 3)
            val targetIdRaw = parts.getOrNull(1)
            if (targetIdRaw.isNullOrBlank()) {
                api.sendMessage(chatId, ADMIN_STATUS_COMMAND_USAGE, parseMode = null)
                println("ADMIN-STATUS: requester=$userId raw=$trimmed source=command result=missing_args")
                return true
            }
            val targetId = parseTelegramId(targetIdRaw)
            if (targetId == null) {
                api.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.", parseMode = null)
                println("ADMIN-STATUS: requester=$userId raw=$trimmed source=command result=bad_id")
                return true
            }
            handlePremiumStatusLookup(
                chatId = chatId,
                adminId = userId,
                targetId = targetId,
                source = "command",
                showMenuAfter = false
            )
            return true
        }

        if (lower.startsWith("/grantpremium")) {
            if (!isAdmin(userId)) {
                api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
                return true
            }
            val parts = trimmed.split("\\s+".toRegex(), limit = 3)
            val targetId = parseTelegramId(parts.getOrNull(1))
            val daysRaw = parts.getOrNull(2)
            val days = parsePositiveDays(daysRaw)
            if (targetId == null) {
                api.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.", parseMode = null)
                println("ADMIN-GRANT: requester=$userId raw=$trimmed source=command result=bad_id")
                return true
            }
            if (days == null) {
                val numeric = daysRaw?.trim()?.toIntOrNull() != null
                if (numeric) {
                    api.sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", parseMode = null)
                    println("ADMIN-GRANT: requester=$userId target=$targetId raw=$trimmed source=command result=bad_days")
                } else {
                    api.sendMessage(chatId, ADMIN_GRANT_COMMAND_USAGE, parseMode = null)
                    println("ADMIN-GRANT: requester=$userId raw=$trimmed source=command result=missing_days")
                }
                return true
            }
            handleGrantPremium(
                chatId = chatId,
                adminId = userId,
                targetId = targetId,
                days = days,
                source = "command",
                showMenuAfter = false
            )
            return true
        }

        return false
    }

    // ===== LLM =====

    private fun handleChef(chatId: Long, userId: Long, userText: String) {
        val isAdminUser = isAdmin(userId)
        if (!RateLimiter.allow(chatId, isAdminUser)) {
            api.sendMessage(chatId, AppConfig.PAYWALL_TEXT)
            return
        }
        val persona = PersonaMode.CHEF
        val history = buildHistoryMessages(userId, persona)
        val preparedUser = prepareForHistory(userText)
        val messages = mutableListOf(ChatMessage("system", PersonaPrompt.system()))
        messages.addAll(history)
        messages += ChatMessage("user", preparedUser)
        val reply = llm.complete(messages)
        api.sendMessage(chatId, reply)
        RateLimiter.consumeIfFree(chatId, isAdminUser)

        if (preparedUser.isNotEmpty()) {
            ChatHistoryRepo.append(userId, persona.modeKey(), "user", preparedUser)
        }
        val assistantPrepared = prepareForHistory(reply)
        if (assistantPrepared.isNotEmpty()) {
            ChatHistoryRepo.append(userId, persona.modeKey(), "assistant", assistantPrepared)
        }
    }

    private fun handleCalorieInput(chatId: Long, userId: Long, userText: String) {
        val isAdminUser = isAdmin(userId)
        if (!RateLimiter.allow(chatId, isAdminUser)) {
            api.sendMessage(chatId, AppConfig.PAYWALL_TEXT)
            state.remove(chatId)
            return
        }
        val persona = PersonaMode.CALC
        val history = buildHistoryMessages(userId, persona)
        val userPayload = "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userText"
        val preparedUser = prepareForHistory(userPayload)
        val messages = mutableListOf(ChatMessage("system", CalorieCalculatorPrompt.SYSTEM))
        messages.addAll(history)
        messages += ChatMessage("user", preparedUser)
        val reply = llm.complete(messages)
        api.sendMessage(chatId, reply)
        RateLimiter.consumeIfFree(chatId, isAdminUser)
        if (preparedUser.isNotEmpty()) {
            ChatHistoryRepo.append(userId, persona.modeKey(), "user", preparedUser)
        }
        val assistantPrepared = prepareForHistory(reply)
        if (assistantPrepared.isNotEmpty()) {
            ChatHistoryRepo.append(userId, persona.modeKey(), "assistant", assistantPrepared)
        }
        state.remove(chatId)
    }

    private fun handleProductInput(chatId: Long, userId: Long, userText: String) {
        val isAdminUser = isAdmin(userId)
        if (!RateLimiter.allow(chatId, isAdminUser)) {
            api.sendMessage(chatId, AppConfig.PAYWALL_TEXT)
            state.remove(chatId)
            return
        }
        val persona = PersonaMode.PRODUCT
        val history = buildHistoryMessages(userId, persona)
        val userPayload = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: $userText"
        val preparedUser = prepareForHistory(userPayload)
        val messages = mutableListOf(ChatMessage("system", ProductInfoPrompt.SYSTEM))
        messages.addAll(history)
        messages += ChatMessage("user", preparedUser)
        val reply = llm.complete(messages)
        api.sendMessage(chatId, reply)
        RateLimiter.consumeIfFree(chatId, isAdminUser)
        if (preparedUser.isNotEmpty()) {
            ChatHistoryRepo.append(userId, persona.modeKey(), "user", preparedUser)
        }
        val assistantPrepared = prepareForHistory(reply)
        if (assistantPrepared.isNotEmpty()) {
            ChatHistoryRepo.append(userId, persona.modeKey(), "assistant", assistantPrepared)
        }
        state.remove(chatId)
    }


    private fun adminMenuKeyboard(): InlineKeyboardMarkup =
        InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", CB_ADMIN_BROADCAST)),
                listOf(InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", CB_ADMIN_STATS)),
                listOf(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", CB_ADMIN_USER_STATUS)),
                listOf(InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", CB_ADMIN_GRANT))
            )
        )

    private fun broadcastConfirmKeyboard(): InlineKeyboardMarkup =
        InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(
                    InlineKeyboardButton("–î–∞", CB_ADMIN_CONFIRM),
                    InlineKeyboardButton("–ù–µ—Ç", CB_ADMIN_CANCEL)
                )
            )
        )

    private fun validateBroadcastText(chatId: Long, rawInput: String): String? {
        val trimmed = rawInput.trim()
        if (trimmed.isEmpty()) {
            api.sendMessage(chatId, "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", parseMode = null)
            return null
        }
        if (trimmed.length > MAX_BROADCAST_CHARS) {
            api.sendMessage(
                chatId,
                "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_BROADCAST_CHARS} —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                parseMode = null
            )
            return null
        }
        val sanitized = sanitizeAdminInput(trimmed, MAX_BROADCAST_CHARS)
        if (sanitized.isEmpty()) {
            api.sendMessage(chatId, "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", parseMode = null)
            return null
        }
        return sanitized
    }

    private fun handlePremiumStatusLookup(
        chatId: Long,
        adminId: Long,
        targetId: Long,
        source: String,
        showMenuAfter: Boolean
    ): Boolean {
        AdminAuditRepo.record(adminId, action = "status_lookup", target = targetId.toString(), meta = "source=$source")
        val snapshot = runCatching { UsersRepo.loadSnapshot(targetId) }
            .onFailure {
                println("ADMIN-STATUS-ERR: requester=$adminId target=$targetId source=$source reason=${it.message}")
            }
            .getOrElse {
                api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
                return false
            }

        if (snapshot == null) {
            println("ADMIN-STATUS: requester=$adminId target=$targetId source=$source result=not_found")
            api.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", parseMode = null)
            if (showMenuAfter) {
                showAdminMenu(chatId, adminId)
            }
            return false
        }

        if (!snapshot.existsInUsers) {
            runCatching { UsersRepo.touch(targetId) }
                .onFailure {
                    println("ADMIN-STATUS-ERR: requester=$adminId target=$targetId source=$source reason=touch_failed err=${it.message}")
                }
        }

        val now = System.currentTimeMillis()
        val until = runCatching { PremiumRepo.getUntil(targetId) }
            .onFailure {
                println("ADMIN-STATUS-ERR: requester=$adminId target=$targetId source=$source reason=${it.message}")
            }
            .getOrElse {
                api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
                return false
            }

        val messages7d = runCatching { MessagesRepo.countUserMessagesSince(targetId, now - 7 * DAY_MS) }
            .onFailure {
                println("ADMIN-STATUS-ERR: requester=$adminId target=$targetId source=$source reason=${it.message}")
            }
            .getOrElse {
                api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
                return false
            }

        val messagesTotal = runCatching { MessagesRepo.countTotalUserMessages(targetId) }
            .onFailure {
                println("ADMIN-STATUS-ERR: requester=$adminId target=$targetId source=$source reason=${it.message}")
            }
            .getOrElse {
                api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
                return false
            }

        val premiumActive = until != null && until > now
        val untilDisplay = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
        val firstSeenDisplay = snapshot.firstSeen?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
        val blockedLine = if (snapshot.blocked || snapshot.blockedTs > 0) {
            val blockedAt = snapshot.blockedTs.takeIf { it > 0 }?.let { dtf.format(Instant.ofEpochMilli(it)) }
            if (blockedAt != null) {
                "–°—Ç–∞—Ç—É—Å: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ $blockedAt)"
            } else {
                "–°—Ç–∞—Ç—É—Å: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            }
        } else {
            "–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω"
        }
        val premiumLine = when {
            premiumActive -> {
                val remaining = ((until!! - now + DAY_MS - 1) / DAY_MS).coerceAtLeast(0L)
                val remainText = if (remaining <= 0L) "–º–µ–Ω–µ–µ 1 –¥–Ω—è" else "$remaining –¥–Ω."
                "–ü—Ä–µ–º–∏—É–º: –∞–∫—Ç–∏–≤–µ–Ω –¥–æ $untilDisplay (–æ—Å—Ç–∞–ª–æ—Å—å $remainText)"
            }
            until != null && until > 0L -> {
                val expiredAt = dtf.format(Instant.ofEpochMilli(until))
                "–ü—Ä–µ–º–∏—É–º: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–∏—Å—Ç—ë–∫ $expiredAt)"
            }
            else -> "–ü—Ä–µ–º–∏—É–º: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        }

        val statusMessage = """
            Telegram ID: $targetId
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: $firstSeenDisplay
            $blockedLine
            $premiumLine
            –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 7 –¥–Ω–µ–π: $messages7d
            –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: $messagesTotal
        """.trimIndent()

        api.sendMessage(chatId, statusMessage, parseMode = null)
        println(
            "ADMIN-STATUS: requester=$adminId target=$targetId source=$source result=ok premium=$premiumActive " +
                "until=$untilDisplay messages7d=$messages7d messagesTotal=$messagesTotal blocked=${snapshot.blocked} " +
                "blockedTs=${snapshot.blockedTs} " +
                "existsInUsers=${snapshot.existsInUsers}"
        )
        if (showMenuAfter) {
            showAdminMenu(chatId)
        }
        return true
    }

    private fun handleGrantPremium(
        chatId: Long,
        adminId: Long,
        targetId: Long,
        days: Int,
        source: String,
        showMenuAfter: Boolean
    ): Boolean {
        AdminAuditRepo.record(
            adminId,
            action = "grant_request",
            target = targetId.toString(),
            meta = "days=$days source=$source"
        )
        val snapshot = runCatching { UsersRepo.loadSnapshot(targetId) }
            .onFailure {
                println("ADMIN-GRANT-ERR: requester=$adminId target=$targetId days=$days source=$source reason=${it.message}")
            }
            .getOrElse {
                api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
                return false
            }

        if (snapshot == null) {
            println("ADMIN-GRANT: requester=$adminId target=$targetId days=$days source=$source result=not_found")
            api.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", parseMode = null)
            if (showMenuAfter) {
                showAdminMenu(chatId)
            }
            return false
        }

        if (!snapshot.existsInUsers) {
            runCatching { UsersRepo.touch(targetId) }
                .onFailure {
                    println("ADMIN-GRANT-ERR: requester=$adminId target=$targetId days=$days source=$source reason=touch_failed err=${it.message}")
                }
        }

        val until = runCatching {
            PremiumRepo.grantDays(targetId, days)
            PremiumRepo.getUntil(targetId)
        }.onFailure {
            println("ADMIN-GRANT-ERR: requester=$adminId target=$targetId days=$days source=$source reason=${it.message}")
        }.getOrElse {
            api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
            return false
        }

        val untilDisplay = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
        api.sendMessage(chatId, "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $targetId –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: $untilDisplay", parseMode = null)
        runCatching { UsersRepo.touch(targetId) }
            .onFailure {
                println(
                    "ADMIN-GRANT-ERR: requester=$adminId target=$targetId days=$days source=$source reason=touch_failed err=${it.message}"
                )
            }
        println(
            "ADMIN-GRANT: requester=$adminId target=$targetId days=$days source=$source result=ok until=$untilDisplay " +
                "existsInUsers=${snapshot.existsInUsers} blocked=${snapshot.blocked} blockedTs=${snapshot.blockedTs}"
        )
        if (showMenuAfter) {
            showAdminMenu(chatId, adminId)
        }
        return true
    }

    private fun trackUserActivity(userId: Long, text: String, role: String = "user") {
        val sanitized = sanitizeActivityText(text) ?: return
        runCatching { MessagesRepo.record(userId, sanitized, role) }
            .onFailure {
                println(
                    "DB-MESSAGES-ERR: user_id=$userId role=$role chars=${sanitized.length} reason=${it.message}"
                )
            }
    }

    private fun splitMessageForBroadcast(text: String): List<String> {
        val maxLen = 4096
        if (text.length <= maxLen) return listOf(text)
        val result = mutableListOf<String>()
        var start = 0
        while (start < text.length) {
            var end = (start + maxLen).coerceAtMost(text.length)
            if (end < text.length) {
                var split = text.lastIndexOf('\n', end - 1)
                if (split < start) {
                    split = text.lastIndexOf(' ', end - 1)
                }
                if (split >= start) {
                    end = split + 1
                }
            }
            if (end <= start) {
                end = (start + maxLen).coerceAtMost(text.length)
            }
            result += text.substring(start, end)
            start = end
        }
        return result
    }

    private fun startBroadcast(adminChatId: Long, text: String, adminId: Long) {
        adminStates.remove(adminChatId)
        synchronized(broadcastMutex) {
            val current = broadcastJob
            if (current?.isActive == true) {
                api.sendMessage(adminChatId, "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.", parseMode = null)
                    return
                }
                api.sendMessage(adminChatId, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏‚Ä¶", parseMode = null)
            broadcastJob = GlobalScope.launch {
                try {
                    val context = runCatching { AudienceRepo.createContext(includeBlocked = false) }
                        .onFailure {
                            println("ADMIN-BROADCAST-ERR: failed to form audience ${it.message}")
                            api.sendMessage(adminChatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
                        }
                        .getOrNull()
                        ?: return@launch
                    val totalRecipients = context.filteredCount
                    if (totalRecipients <= 0L) {
                        api.sendMessage(adminChatId, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–µ–∫–æ–º—É.", parseMode = null)
                        return@launch
                    }
                    val messageChunks = splitMessageForBroadcast(text)
                    println(
                        "ADMIN-BROADCAST-START: admin=$adminChatId recipients=$totalRecipients chunks=${messageChunks.size}"
                    )
                    AdminAuditRepo.record(
                        adminId = adminId,
                        action = "broadcast_start",
                        target = adminChatId.toString(),
                        meta = "recipients=$totalRecipients chunks=${messageChunks.size}"
                    )
                    var attempts = 0L
                    var sentRecipients = 0L
                    var failedRecipients = 0L
                    var blockedRecipients = 0L
                    val totalBatches = ((totalRecipients + BROADCAST_BATCH_SIZE - 1) / BROADCAST_BATCH_SIZE).coerceAtLeast(1)
                    var batchIndex = 0L
                    var offset = 0L
                    while (offset < totalRecipients) {
                        val batch = AudienceRepo.loadPage(context, offset, BROADCAST_BATCH_SIZE)
                        if (batch.isEmpty()) {
                            break
                        }
                        batchIndex++
                        for (recipient in batch) {
                            var recipientOutcome = BroadcastResult.SENT
                            for (chunk in messageChunks) {
                                attempts++
                                val result = sendBroadcastChunk(recipient, chunk)
                                if (result != BroadcastResult.SENT) {
                                    recipientOutcome = result
                                }
                                delay(BROADCAST_RATE_DELAY_MS)
                                if (result != BroadcastResult.SENT) {
                                    break
                                }
                            }
                            when (recipientOutcome) {
                                BroadcastResult.SENT -> sentRecipients++
                                BroadcastResult.BLOCKED -> blockedRecipients++
                                BroadcastResult.FAILED -> failedRecipients++
                            }
                        }
                        offset += batch.size
                        val failedTotal = failedRecipients + blockedRecipients
                        println(
                            "ADMIN-BROADCAST: batch=$batchIndex/$totalBatches sent=$sentRecipients failed=$failedTotal total=$totalRecipients"
                        )
                    }
                    val errors = failedRecipients + blockedRecipients
                    val summary = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $sentRecipients, –æ—à–∏–±–æ–∫: $errors"
                    api.sendMessage(adminChatId, summary, parseMode = null)
                    AdminAuditRepo.record(
                        adminId = adminId,
                        action = "broadcast_done",
                        target = adminChatId.toString(),
                        meta = "sent=$sentRecipients failed=$failedRecipients blocked=$blockedRecipients"
                    )
                    println(
                        "ADMIN-BROADCAST-DONE: admin=$adminChatId recipients=$totalRecipients attempts=$attempts sent=$sentRecipients failed=$failedRecipients blocked=$blockedRecipients"
                    )
                } finally {
                    synchronized(broadcastMutex) { broadcastJob = null }
                }
            }
        }
    }

    private fun isBlockedResponse(code: Int?, description: String?): Boolean {
        if (code == 403) return true
        val normalized = description?.lowercase()?.trim() ?: return false
        return normalized.contains("bot was blocked by the user")
    }

    private fun isBlockedException(message: String?): Boolean {
        if (message.isNullOrBlank()) return false
        val normalized = message.lowercase()
        if (normalized.contains("bot was blocked by the user")) return true
        return normalized.contains("forbidden") && normalized.contains("403")
    }

    private suspend fun sendBroadcastChunk(recipient: Long, chunk: String): BroadcastResult {
        for (attempt in 0 until 5) {
            val outcome = try {
                api.sendMessageDetailed(recipient, chunk, parseMode = null, maxChars = 4096)
            } catch (t: Throwable) {
                val message = t.message
                if (isBlockedException(message)) {
                    println("ADMIN-BROADCAST-ERR: user=$recipient reason=forbidden exception=${message ?: "unknown"}")
                    runCatching { UsersRepo.markBlocked(recipient, blocked = true) }
                        .onFailure { println("ADMIN-BROADCAST-ERR: mark_blocked_failed user=$recipient reason=${it.message}") }
                    return BroadcastResult.BLOCKED
                }
                println("ADMIN-BROADCAST-ERR: user=$recipient reason=${message ?: "unknown"} attempt=${attempt + 1}")
                delay(500)
                continue
            }
            if (outcome.ok) {
                return BroadcastResult.SENT
            }
            val code = outcome.errorCode?.toString() ?: "unknown"
            val description = outcome.description?.replace("\n", " ")?.trim().orEmpty()
            val body = if (description.isEmpty()) "unknown" else description
            println("TG-HTTP-ERR sendMessage broadcast: code=$code body=$body user=$recipient")
            when {
                outcome.errorCode == 429 -> {
                    val waitSec = (outcome.retryAfterSeconds ?: 1).coerceAtLeast(1)
                    println("ADMIN-BROADCAST-RATE-LIMIT: user=$recipient wait=${waitSec}s attempt=${attempt + 1}")
                    delay(waitSec * 1000L + 250L)
                }
                isBlockedResponse(outcome.errorCode, outcome.description) -> {
                    val desc = outcome.description ?: "forbidden"
                    println("ADMIN-BROADCAST-ERR: user=$recipient reason=forbidden description=$desc")
                    runCatching { UsersRepo.markBlocked(recipient, blocked = true) }
                        .onFailure { println("ADMIN-BROADCAST-ERR: mark_blocked_failed user=$recipient reason=${it.message}") }
                    return BroadcastResult.BLOCKED
                }
                else -> {
                    val code = outcome.errorCode?.toString() ?: "unknown"
                    val desc = outcome.description ?: "unknown"
                    println("ADMIN-BROADCAST-ERR: user=$recipient reason=$desc code=$code")
                    return BroadcastResult.FAILED
                }
            }
        }
        println("ADMIN-BROADCAST-ERR: user=$recipient reason=retries_exhausted")
        return BroadcastResult.FAILED
    }

    private fun sendAdminStats(chatId: Long) {
        runCatching { UsersRepo.repairOrphans(source = "admin_stats") }
            .onFailure { println("ADMIN-STATS-ERR: repair_users ${it.message}") }
        val stats = runCatching {
            val audience = AudienceRepo.createContext(includeBlocked = false)
            val total = audience.unionCount
            val blocked = UsersRepo.countBlocked()
            val premium = PremiumRepo.countActive()
            val active7d = MessagesRepo.countActiveSince(System.currentTimeMillis() - 7L * DAY_MS)
            val activeInstalls = audience.filteredCount.coerceAtLeast(0L)
            AdminStatsSnapshot(total, activeInstalls, blocked, premium, active7d)
        }.getOrElse {
            println("ADMIN-STATS-ERR: ${it.message}")
            api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", parseMode = null)
            return
        }
        val total = stats.total.coerceAtLeast(0L)
        val blocked = stats.blocked.coerceAtLeast(0L)
        val activeInstalls = stats.activeInstalls.coerceAtLeast(0L)
        val premium = stats.premium.coerceAtLeast(0L)
        val active7d = stats.active7d.coerceAtLeast(0L)
        println("ADMIN-STATS-OK: total=$total premium=$premium active7d=$active7d blocked=$blocked")
        val message = buildString {
            appendLine("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            appendLine("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–æ—Ç–∞: $total")
            appendLine("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫: $activeInstalls")
            appendLine("‚Ä¢ –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $premium")
            appendLine("‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ –∑–∞ 7 –¥–Ω–µ–π: $active7d")
            appendLine("‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: $blocked")
        }.trimEnd()
        api.sendMessage(chatId, message, parseMode = null)
    }

    private fun showAdminMenu(chatId: Long, adminId: Long? = null) {
        adminStates.remove(chatId)
        val actor = adminId ?: chatId
        println("ADMIN-AUDIT: action=menu_show chat=$chatId actor=$actor")
        AdminAuditRepo.record(actor, action = "menu_show", target = chatId.toString(), meta = null)
        api.sendMessage(chatId, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", replyMarkup = adminMenuKeyboard(), parseMode = null)
    }

    private fun inlineMenu(): InlineKeyboardMarkup =
        InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç—ã", CB_RECIPES)),
                listOf(InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π", CB_CALC)),
                listOf(InlineKeyboardButton("–ö–ë–ñ–£ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", CB_PRODUCT)),
                listOf(InlineKeyboardButton("–ü–æ–º–æ—â—å", CB_HELP))
            )
        )
}
