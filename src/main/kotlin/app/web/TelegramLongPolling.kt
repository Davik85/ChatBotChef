package app.web

import app.AppConfig
import app.llm.OpenAIClient
import app.llm.dto.ChatMessage
import app.logic.PersonaPrompt
import app.logic.CalorieCalculatorPrompt
import app.logic.ProductInfoPrompt
import app.pay.PaymentService
import app.pay.ReceiptBuilder
import app.web.dto.InlineKeyboardButton
import app.web.dto.InlineKeyboardMarkup
import app.web.dto.TgCallbackQuery
import app.web.dto.TgUpdate
import app.web.dto.*
import kotlinx.coroutines.delay
import app.db.PremiumRepo
import app.logic.RateLimiter
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

class TelegramLongPolling(
    private val token: String,
    private val llm: OpenAIClient
) {
    private val api = TelegramApi(token)

    private val mode = mutableMapOf<Long, PersonaMode>()
    private val state = mutableMapOf<Long, BotState>()

    private enum class PersonaMode { CHEF, CALC, PRODUCT }
    private enum class BotState { AWAITING_CALORIE_INPUT, AWAITING_PRODUCT_INPUT }

    private companion object {
        private const val CB_RECIPES = "menu_recipes"
        private const val CB_CALC = "menu_calc"
        private const val CB_PRODUCT = "menu_product"
        private const val CB_HELP = "menu_help"
        private const val CB_PAY_NOW = "menu_pay_now"

        private val START_GREETING_RU = """
            –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –®–µ—Ñ-–ü–æ–≤–∞—Ä-–ë–æ—Ç, –∏ —è –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –∫—É—Ö–Ω–µ!
            –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–∞–º –Ω—É–∂–Ω—ã —Å–µ–≥–æ–¥–Ω—è?üìå
            
            –†–µ–∂–∏–º—ã:
            
            ‚ú® –†–µ—Ü–µ–ø—Ç—ã ‚Äî —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
            üîç –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à—É –Ω–æ—Ä–º—É –ö–ë–ñ–£ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
            ü•ó –ö–ë–ñ–£ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
        """.trimIndent()

        private val CALORIE_INPUT_PROMPT = """
            üßÆ –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –ø–∏—Ç–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
            
            –í–∞—à –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç (—Å–º), –≤–µ—Å (–∫–≥), –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (–ø–∞—Å—Å–∏–≤–Ω—ã–π/–∞–∫—Ç–∏–≤–Ω—ã–π), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é, —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É).
            
            –ü—Ä–∏–º–µ—Ä:¬´–ú—É–∂—á–∏–Ω–∞, 40 –ª–µ—Ç, 175 —Å–º, 80 –∫–≥, –∞–∫—Ç–∏–≤–Ω—ã–π, 9000 —à–∞–≥–æ–≤, 4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é, —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å¬ª.
            
            ‚ù§Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /start.

        """.trimIndent()

        private val PRODUCT_INPUT_PROMPT = """
            üç∞ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: —á–∞—Å—Ç—å, –∂–∏—Ä–Ω–æ—Å—Ç—å, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
           
            –ü—Ä–∏–º–µ—Ä—ã:
           
            ‚Äî —Å–≤–∏–Ω–∏–Ω–∞ —à–µ—è
            ‚Äî –ª–æ—Å–æ—Å—å —Å—ã—Ä–æ–π
            ‚Äî –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –±–µ–∑ –∫–æ–∂–∏
            ‚Äî —Ä–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π
            ‚Äî —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞
           
            ‚òù–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start!
        """.trimIndent()

        private val CHEF_INPUT_PROMPT = """
            –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:
            
            –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–û–±–µ–¥, –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –±—Ä–æ–∫–∫–æ–ª–∏, –ø–∞—Ä–æ–≤–∞—Ä–∫–∞¬ª
            –ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä—è–º–æ: ¬´–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫—É—Ä–∏—Ü—ã –∏ —Ä–∏—Å–∞ –Ω–∞ –æ–±–µ–¥? –Ø –Ω–∞ –¥–∏–µ—Ç–µ, —Ö—É–¥–µ—é.¬ª
           
            üí¨  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start.
        """.trimIndent()

        private val HELP_TEXT = """
            üí° –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —è —É–º–µ—é?–ó–¥–µ—Å—å —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ —Ñ–∏—à–∫–∏ —Å–ø—Ä—è—Ç–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –í—Å—ë –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ!

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            ‚ú® /recipes ‚Äî –ü–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
            ‚öñÔ∏è /caloriecalculator ‚Äî –†–∞—Å—Å—á–∏—Ç–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π
            üßÇ /productinfo ‚Äî –£–∑–Ω–∞–π –ö–ë–ñ–£ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            üéØ /start ‚Äî –û—Ç–∫—Ä–æ—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é

            –°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞:
        """.trimIndent()

        private const val START_IMAGE_RES = "welcome/start.jpg"

        private val ADMIN_IDS: Set<Long> =
            (System.getenv("ADMIN_IDS") ?: "")
                .split(",").mapNotNull { it.trim().toLongOrNull() }.toSet()

        private val dtf: DateTimeFormatter =
            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm").withZone(ZoneId.systemDefault())

        private const val HOUR_MS = 60 * 60 * 1000L
        private const val DAY_MS = 24 * HOUR_MS
        private const val REMINDER_PERIOD_MS = HOUR_MS
    }

    private fun isAdmin(userId: Long): Boolean = ADMIN_IDS.contains(userId)

    private var lastReminderCheck = 0L

    suspend fun run() {
        require(api.getMe()) { "Telegram getMe failed" }
        var offset: Long? = null

        while (true) {
            try {
                val now = System.currentTimeMillis()
                if (now - lastReminderCheck >= REMINDER_PERIOD_MS) {
                    tickRenewalReminders(now)
                    lastReminderCheck = now
                }

                val updates: List<TgUpdate> = api.getUpdates(offset)
                if (updates.isEmpty()) { delay(1200); continue }

                for (u in updates) {
                    offset = u.update_id + 1

                    val pcq = u.pre_checkout_query
                    if (pcq != null) {
                        handlePreCheckout(pcq); continue
                    }

                    val cb: TgCallbackQuery? = u.callback_query
                    if (cb != null) {
                        handleCallback(cb); continue
                    }

                    val msg = u.message ?: u.edited_message ?: continue

                    val sp = msg.successful_payment
                    if (sp != null) {
                        handleSuccessfulPayment(msg); continue
                    }

                    val text = msg.text?.trim().orEmpty()
                    if (text.isBlank()) continue
                    route(msg)
                }
            } catch (t: Throwable) {
                println("POLLING-ERR: ${t.message}")
                delay(1500)
            }
        }
    }

    // ===== Payments =====

    private fun handlePreCheckout(q: TgPreCheckoutQuery) {
        val validation = PaymentService.validatePreCheckout(q)
        if (!validation.ok) {
            api.answerPreCheckoutQuery(q.id, ok = false, errorMessage = validation.errorMessage)
            return
        }
        api.answerPreCheckoutQuery(q.id, ok = true)
    }

    private fun handleSuccessfulPayment(msg: TgMessage) {
        val chatId = msg.chat.id
        val payment = msg.successful_payment ?: return
        val recorded = PaymentService.handleSuccessfulPayment(chatId, payment)
        if (!recorded) {
            api.sendMessage(chatId, "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
            return
        }
        PremiumRepo.grantDays(chatId, AppConfig.premiumDays)
        val until = PremiumRepo.getUntil(chatId)
        val untilStr = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
        api.sendMessage(chatId, "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: $untilStr")
    }

    private fun sendTelegramInvoice(chatId: Long): Boolean {
        if (!PaymentService.paymentsAvailable) {
            api.sendMessage(chatId, PaymentService.paymentsDisabledMessage)
            return false
        }
        val providerToken = AppConfig.providerToken
        if (providerToken.isNullOrBlank()) {
            api.sendMessage(chatId, PaymentService.paymentsDisabledMessage)
            return false
        }
        val title = "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –Ω–∞ ${AppConfig.premiumDays} –¥–Ω–µ–π"
        val desc = "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        val prices = listOf(TgLabeledPrice(label = "–ü–æ–¥–ø–∏—Å–∫–∞", amount = AppConfig.premiumPriceRub * 100))
        val payload = PaymentService.newInvoicePayload(chatId)
        PaymentService.registerInvoice(payload, chatId)
        val providerData = ReceiptBuilder.providerDataForSubscription(AppConfig.premiumPriceRub, title)
        val sent = api.sendInvoice(
            chatId = chatId,
            title = title,
            description = desc,
            payload = payload,
            providerToken = providerToken,
            currency = "RUB",
            prices = prices,
            needEmail = AppConfig.requireEmailForReceipt,
            needPhone = AppConfig.requirePhoneForReceipt,
            sendEmailToProvider = AppConfig.requireEmailForReceipt,
            sendPhoneToProvider = AppConfig.requirePhoneForReceipt,
            providerData = providerData
        )
        if (!sent) {
            PaymentService.markInvoiceFailure(payload, "send_invoice_failed")
        }
        return sent
    }

    // ===== Callback =====

    private fun handleCallback(cb: TgCallbackQuery) {
        val chatId = cb.message?.chat?.id ?: return
        val msgId = cb.message.message_id

        when (cb.data) {
            CB_RECIPES -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                api.sendMessage(chatId, CHEF_INPUT_PROMPT)
            }
            CB_CALC -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.CALC
                state[chatId] = BotState.AWAITING_CALORIE_INPUT
                api.sendMessage(chatId, CALORIE_INPUT_PROMPT)
            }
            CB_PRODUCT -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.PRODUCT
                state[chatId] = BotState.AWAITING_PRODUCT_INPUT
                api.sendMessage(chatId, PRODUCT_INPUT_PROMPT)
            }
            CB_HELP -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                api.sendMessage(chatId, HELP_TEXT)
            }
            CB_PAY_NOW -> {
                api.answerCallback(cb.id)
                api.deleteMessage(chatId, msgId)
                val ok = sendTelegramInvoice(chatId)
                if (!ok && PaymentService.paymentsAvailable) api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            }
        }
    }

    // ===== Router =====

    private fun route(msg: TgMessage) {
        val chatId = msg.chat.id
        val msgId = msg.message_id
        val userId = msg.from?.id ?: chatId
        val lower = msg.text?.lowercase().orEmpty()

        // ADMIN
        if (lower.startsWith("/premiumstatus")) {
            if (!isAdmin(userId)) { api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º."); return }
            val parts = lower.split(" ").filter { it.isNotBlank() }
            val target = parts.getOrNull(1)?.toLongOrNull() ?: userId
            val until = PremiumRepo.getUntil(target)
            val untilStr = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            api.sendMessage(chatId, "Premium –¥–ª—è $target: $untilStr")
            return
        }
        if (lower.startsWith("/grantpremium")) {
            if (!isAdmin(userId)) { api.sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º."); return }
            val parts = lower.split(" ").filter { it.isNotBlank() }
            val target = parts.getOrNull(1)?.toLongOrNull()
            val days = parts.getOrNull(2)?.toIntOrNull()
            if (target == null || days == null || days <= 0) {
                api.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grantpremium <tgId> <days>"); return
            }
            PremiumRepo.grantDays(target, days)
            val until = PremiumRepo.getUntil(target)
            val untilStr = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
            api.sendMessage(chatId, "–í—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $target –Ω–∞ $days –¥–Ω. –î–æ: $untilStr")
            return
        }

        // PUBLIC
        if (lower.startsWith("/whoami")) {
            api.sendMessage(chatId, "–í–∞—à Telegram ID: $userId"); return
        }
        if (lower.startsWith("/premium")) {
            val ok = sendTelegramInvoice(chatId)
            if (!ok && PaymentService.paymentsAvailable) api.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        }

        when (state[chatId]) {
            BotState.AWAITING_CALORIE_INPUT ->
                if (!lower.startsWith("/")) { handleCalorieInput(chatId, msg.text ?: ""); return }
            BotState.AWAITING_PRODUCT_INPUT ->
                if (!lower.startsWith("/")) { handleProductInput(chatId, msg.text ?: ""); return }
            else -> {}
        }

        when (lower) {
            "/start" -> {
                api.deleteMessage(chatId, msgId)
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                api.sendPhotoResource(chatId, START_IMAGE_RES, START_GREETING_RU, inlineMenu())
                return
            }
            "/recipes" -> { mode[chatId] = PersonaMode.CHEF; state.remove(chatId); api.sendMessage(chatId, CHEF_INPUT_PROMPT); return }
            "/caloriecalculator" -> { mode[chatId] = PersonaMode.CALC; state[chatId] = BotState.AWAITING_CALORIE_INPUT; api.sendMessage(chatId, CALORIE_INPUT_PROMPT); return }
            "/productinfo" -> { mode[chatId] = PersonaMode.PRODUCT; state[chatId] = BotState.AWAITING_PRODUCT_INPUT; api.sendMessage(chatId, PRODUCT_INPUT_PROMPT); return }
            "/help" -> { api.sendMessage(chatId, HELP_TEXT); return }
        }

        when (mode[chatId] ?: PersonaMode.CHEF) {
            PersonaMode.CHEF    -> handleChef(chatId, msg.text ?: "")
            PersonaMode.CALC    -> handleCalorieInput(chatId, msg.text ?: "")
            PersonaMode.PRODUCT -> handleProductInput(chatId, msg.text ?: "")
        }
    }

    // ===== LLM =====

    private fun handleChef(chatId: Long, userText: String) {
        if (!isAdmin(chatId) && !RateLimiter.checkAndConsume(chatId)) { sendPaywall(chatId); return }
        val sys = ChatMessage("system", PersonaPrompt.system())
        val user = ChatMessage("user", userText)
        val reply = llm.complete(listOf(sys, user))
        api.sendMessage(chatId, reply)
    }

    private fun handleCalorieInput(chatId: Long, userText: String) {
        if (!isAdmin(chatId) && !RateLimiter.checkAndConsume(chatId)) { sendPaywall(chatId); state.remove(chatId); return }
        val sys = ChatMessage("system", CalorieCalculatorPrompt.SYSTEM)
        val user = ChatMessage("user", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userText")
        val reply = llm.complete(listOf(sys, user))
        api.sendMessage(chatId, reply)
        state.remove(chatId)
    }

    private fun handleProductInput(chatId: Long, userText: String) {
        if (!isAdmin(chatId) && !RateLimiter.checkAndConsume(chatId)) { sendPaywall(chatId); state.remove(chatId); return }
        val sys = ChatMessage("system", ProductInfoPrompt.SYSTEM)
        val user = ChatMessage("user", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: $userText")
        val reply = llm.complete(listOf(sys, user))
        api.sendMessage(chatId, reply)
        state.remove(chatId)
    }

    private fun sendPaywall(chatId: Long) {
        if (!PaymentService.paymentsAvailable) {
            api.sendMessage(chatId, PaymentService.paymentsDisabledMessage)
            return
        }
        val kb = InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –≤ Telegram", CB_PAY_NOW))
            )
        )
        api.sendMessage(chatId, AppConfig.PAYWALL_TEXT, replyMarkup = kb)
    }

    private fun inlineMenu(): InlineKeyboardMarkup =
        InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç—ã", CB_RECIPES)),
                listOf(InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π", CB_CALC)),
                listOf(InlineKeyboardButton("–ö–ë–ñ–£ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", CB_PRODUCT)),
                listOf(InlineKeyboardButton("–ü–æ–º–æ—â—å", CB_HELP))
            )
        )

    // ===== –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ =====
    private fun tickRenewalReminders(now: Long) {
        // –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è PremiumRepo.listExpiringBetween(...) –∏ markReminded(...)
        // –ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ ‚Äî –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ò–Ω–∞—á–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—ã–∑–æ–≤ tickRenewalReminders().
        val hour = HOUR_MS
        fun window(center: Long) = center - hour to center + hour

        // 3 –¥–Ω—è
        kotlin.run {
            val (from, to) = window(now + 3 * DAY_MS)
            PremiumRepo.listExpiringBetween(from, to, "3d").forEach { id ->
                PremiumRepo.markReminded(id, "3d")
                sendReminder(id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –ü—Ä–æ–¥–ª–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø.")
            }
        }
        // 1 –¥–µ–Ω—å
        kotlin.run {
            val (from, to) = window(now + DAY_MS)
            PremiumRepo.listExpiringBetween(from, to, "1d").forEach { id ->
                PremiumRepo.markReminded(id, "1d")
                sendReminder(id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –¥–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤.")
            }
        }
        // –°–µ–≥–æ–¥–Ω—è
        kotlin.run {
            val from = now
            val to = now + DAY_MS
            PremiumRepo.listExpiringBetween(from, to, "0d").forEach { id ->
                PremiumRepo.markReminded(id, "0d")
                sendReminder(id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –≤ Telegram.")
            }
        }
    }

    private fun sendReminder(userId: Long, text: String) {
        if (!PaymentService.paymentsAvailable) {
            api.sendMessage(userId, PaymentService.paymentsDisabledMessage)
            return
        }
        val kb = InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –≤ Telegram", CB_PAY_NOW))
            )
        )
        api.sendMessage(userId, text, replyMarkup = kb)
    }
}
