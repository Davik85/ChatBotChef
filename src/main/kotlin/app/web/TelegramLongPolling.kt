package app.web

import app.llm.OpenAIClient
import app.llm.dto.ChatMessage
import app.logic.PersonaPrompt
import app.logic.CalorieCalculatorPrompt
import app.logic.ProductInfoPrompt
import app.web.dto.InlineKeyboardButton
import app.web.dto.InlineKeyboardMarkup
import app.web.dto.TgCallbackQuery
import app.web.dto.TgUpdate
import app.web.dto.* // –¥–ª—è TgUser/TgMessage (from, reply_to_message)
import kotlinx.coroutines.delay
import app.db.PremiumRepo
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

/**
 * –ú–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ /start. –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –º–µ–Ω—é/–±–∞–Ω–Ω–µ—Ä —É–¥–∞–ª—è–µ–º.
 * –¢–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏ —Å–∞–º–æ –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start.
 */
class TelegramLongPolling(
    private val token: String,
    private val llm: OpenAIClient
) {
    private val api = TelegramApi(token)

    private val mode = mutableMapOf<Long, PersonaMode>()
    private val state = mutableMapOf<Long, BotState>()

    private enum class PersonaMode { CHEF, CALC, PRODUCT }
    private enum class BotState { AWAITING_CALORIE_INPUT, AWAITING_PRODUCT_INPUT }

    private companion object {
        private const val CB_RECIPES = "menu_recipes"
        private const val CB_CALC = "menu_calc"
        private const val CB_PRODUCT = "menu_product"
        private const val CB_HELP = "menu_help"

        private val START_GREETING_RU = """
            –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –®–µ—Ñ-–ü–æ–≤–∞—Ä-–ë–æ—Ç, –∏ —è –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –∫—É—Ö–Ω–µ!
            –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–∞–º –Ω—É–∂–Ω—ã —Å–µ–≥–æ–¥–Ω—è?üìå
            
            –†–µ–∂–∏–º—ã:
            
            ‚ú® –†–µ—Ü–µ–ø—Ç—ã ‚Äî —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
            üîç –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à—É –Ω–æ—Ä–º—É –ö–ë–ñ–£ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
            ü•ó –ö–ë–ñ–£ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
        """.trimIndent()

        private val CALORIE_INPUT_PROMPT = """
            üßÆ –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –ø–∏—Ç–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
            
            –í–∞—à –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç (—Å–º), –≤–µ—Å (–∫–≥), –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (–ø–∞—Å—Å–∏–≤–Ω—ã–π/–∞–∫—Ç–∏–≤–Ω—ã–π), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é, —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É).
            
            –ü—Ä–∏–º–µ—Ä:¬´–ú—É–∂—á–∏–Ω–∞, 40 –ª–µ—Ç, 175 —Å–º, 80 –∫–≥, –∞–∫—Ç–∏–≤–Ω—ã–π, 9000 —à–∞–≥–æ–≤, 4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é, —Ü–µ–ª—å –ø–æ—Ö—É–¥–µ—Ç—å¬ª.
            
            ‚ù§Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /start.

        """.trimIndent()

        private val PRODUCT_INPUT_PROMPT = """
            üç∞ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: —á–∞—Å—Ç—å, –∂–∏—Ä–Ω–æ—Å—Ç—å, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
           
            –ü—Ä–∏–º–µ—Ä—ã:
           
            ‚Äî —Å–≤–∏–Ω–∏–Ω–∞ —à–µ—è
           
            ‚Äî –ª–æ—Å–æ—Å—å —Å—ã—Ä–æ–π
           
            ‚Äî –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –±–µ–∑ –∫–æ–∂–∏
          
            ‚Äî —Ä–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π
           
            ‚Äî —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞
           
            ‚òù–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start!
        """.trimIndent()

        private val CHEF_INPUT_PROMPT = """
            –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:
            
            –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–û–±–µ–¥, –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –±—Ä–æ–∫–∫–æ–ª–∏, –ø–∞—Ä–æ–≤–∞—Ä–∫–∞¬ª
            –ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä—è–º–æ: ¬´–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –∫—É—Ä–∏—Ü—ã –∏ —Ä–∏—Å–∞ –Ω–∞ –æ–±–µ–¥? –Ø –Ω–∞ –¥–∏–µ—Ç–µ, —Ö—É–¥–µ—é.¬ª
           
            üí¨  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start.
        """.trimIndent()

        private val HELP_TEXT = """
            üí° –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —è —É–º–µ—é?–ó–¥–µ—Å—å —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ —Ñ–∏—à–∫–∏ —Å–ø—Ä—è—Ç–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –í—Å—ë –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ!

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            
            ‚ú® /recipes ‚Äî –ü–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
           
            –ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–ø—Ä–∏—ë–º –ø–∏—â–∏, —Ç–µ—Ö–Ω–∏–∫—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, –¥–∏–µ—Ç—É).–ü—Ä–∏–º–µ—Ä: —É–∂–∏–Ω, –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –±—Ä–æ–∫–∫–æ–ª–∏, –∑–∞–ø–µ—á—å –≤ –¥—É—Ö–æ–≤–∫–µ.
            
            ‚öñÔ∏è /caloriecalculator ‚Äî –†–∞—Å—Å—á–∏—Ç–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π
            
            –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —à–∞–≥–∏ –≤ –¥–µ–Ω—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é –∏ —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å/–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É).–ü—Ä–∏–º–µ—Ä: –∂–µ–Ω—â–∏–Ω–∞, 30 –ª–µ—Ç, 165 —Å–º, 62 –∫–≥, –ø–∞—Å—Å–∏–≤–Ω—ã–π, 4000 —à–∞–≥–æ–≤, 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ü–µ–ª—å –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É.
           
            üßÇ /productinfo ‚Äî –£–∑–Ω–∞–π –ö–ë–ñ–£ –ª—é–±–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
           
            –°–æ–æ–±—â–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ (—á–∞—Å—Ç—å, –∂–∏—Ä–Ω–æ—Å—Ç—å, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è). –ü—Ä–∏–º–µ—Ä: —Å–≤–∏–Ω–∏–Ω–∞ —à–µ—è, –ª–æ—Å–æ—Å—å —Å—ã—Ä–æ–π, —Ä–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞.
          
            üéØ /start ‚Äî –û—Ç–∫—Ä–æ—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            
            –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:
            -	–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å–≤–æ–±–æ–¥–Ω–æ, –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ‚Äî —Ä–∞–∑–±–µ—Ä—É—Å—å —Å–∞–º!
            -	–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞–ø–∏—à–∏ —Å—Ä–∞–∑—É (¬´–±–µ–∑ –º–æ–ª–æ—á–Ω–æ–≥–æ¬ª, ¬´–±—ã—Å—Ç—Ä–æ¬ª, ¬´–º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞¬ª).
            -	–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start.
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ —É–¥–∞—á–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤! üòä
            
            –°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞:
        """.trimIndent()

        /** –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: src/main/resources/welcome/start.jpg */
        private const val START_IMAGE_RES = "welcome/start.jpg"

        /** –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–∑ ENV: ADMIN_IDS=123,456 */
        private val ADMIN_IDS: Set<Long> =
            (System.getenv("ADMIN_IDS") ?: "")
                .split(",")
                .mapNotNull { it.trim().toLongOrNull() }
                .toSet()

        private val dtf: DateTimeFormatter =
            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm").withZone(ZoneId.systemDefault())
    }

    suspend fun run() {
        require(api.getMe()) { "Telegram getMe failed" }
        var offset: Long? = null

        while (true) {
            try {
                val updates: List<TgUpdate> = api.getUpdates(offset)
                if (updates.isEmpty()) {
                    delay(1200); continue
                }

                for (u in updates) {
                    offset = u.update_id + 1

                    val cb: TgCallbackQuery? = u.callback_query
                    if (cb != null) {
                        handleCallback(cb); continue
                    }

                    val msg = u.message ?: u.edited_message ?: continue
                    val text = msg.text?.trim().orEmpty()
                    if (text.isBlank()) continue

                    route(msg)
                }
            } catch (t: Throwable) {
                println("POLLING-ERR: ${t.message}")
                delay(1500)
            }
        }
    }

    private fun handleCallback(cb: TgCallbackQuery) {
        val chatId = cb.message?.chat?.id ?: return
        val msgId = cb.message.message_id

        when (cb.data) {
            CB_RECIPES -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                api.sendMessage(chatId, CHEF_INPUT_PROMPT)
            }

            CB_CALC -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.CALC
                state[chatId] = BotState.AWAITING_CALORIE_INPUT
                api.sendMessage(chatId, CALORIE_INPUT_PROMPT)
            }

            CB_PRODUCT -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                mode[chatId] = PersonaMode.PRODUCT
                state[chatId] = BotState.AWAITING_PRODUCT_INPUT
                api.sendMessage(chatId, PRODUCT_INPUT_PROMPT)
            }

            CB_HELP -> {
                api.answerCallback(cb.id)
                val deleted = api.deleteMessage(chatId, msgId)
                if (!deleted) api.deleteInlineKeyboard(chatId, msgId)
                api.sendMessage(chatId, HELP_TEXT)
            }
        }
    }

    // —Ä–æ—É—Ç–µ—Ä: –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–µ—Å—å TgMessage, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å from/reply_to_message
    private fun route(msg: TgMessage) {
        val chatId = msg.chat.id
        val msgId = msg.message_id
        val fromId = msg.from?.id
        val lower = msg.text?.lowercase().orEmpty()

        // ===== –ê–¥–º–∏–Ω-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º–∞ =====
        if (lower.startsWith("/premiumstatus")) {
            if (fromId !in ADMIN_IDS) {
                api.sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return
            }
            val parts = msg.text!!.trim().split(Regex("\\s+"))
            val targetId: Long? = when {
                // –ü–æ reply: /premiumstatus
                msg.reply_to_message != null && parts.size == 1 -> msg.reply_to_message.from?.id
                // –ü–æ userId: /premiumstatus <userId>
                parts.size >= 2 -> parts[1].toLongOrNull()
                else -> null
            }
            if (targetId == null) {
                api.sendMessage(chatId, "–§–æ—Ä–º–∞—Ç—ã:\n‚Äî –ø–æ reply: /premiumstatus\n‚Äî –Ω–∞–ø—Ä—è–º—É—é: /premiumstatus <userId>")
                return
            }
            val until = PremiumRepo.getUntil(targetId)
            val now = System.currentTimeMillis()
            if (until == null || until <= now) {
                api.sendMessage(chatId, "–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $targetId: –ø—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
                return
            }
            val remainingMs = until - now
            val days = remainingMs / (24 * 60 * 60 * 1000)
            val hours = (remainingMs % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)
            val untilStr = dtf.format(Instant.ofEpochMilli(until))
            api.sendMessage(chatId, "–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $targetId: –∞–∫—Ç–∏–≤–µ–Ω –¥–æ $untilStr (–æ—Å—Ç–∞–ª–æ—Å—å: $days –¥–Ω $hours —á).")
            return
        }

        // ===== –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (grant/whoami) =====
        if (lower.startsWith("/whoami")) {
            api.sendMessage(chatId, "–í–∞—à Telegram ID: ${fromId ?: "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}")
            return
        }

        if (lower.startsWith("/grantpremium")) {
            if (fromId !in ADMIN_IDS) {
                api.sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return
            }
            val parts = msg.text!!.trim().split(Regex("\\s+"))
            when {
                // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ reply ‚Äî /grantpremium <days>
                msg.reply_to_message != null && parts.size == 2 -> {
                    val days = parts[1].toIntOrNull()
                    val target = msg.reply_to_message.from?.id
                    if (days == null || days <= 0 || target == null) {
                        api.sendMessage(chatId, "–§–æ—Ä–º–∞—Ç (–ø–æ reply): /grantpremium <days>")
                        return
                    }
                    PremiumRepo.grantDays(target, days)
                    val until = PremiumRepo.getUntil(target)
                    val untilStr = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
                    api.sendMessage(chatId, "–û–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $target –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—É–º –Ω–∞ $days –¥–Ω. –î–æ: $untilStr")
                }

                // –í–∞—Ä–∏–∞–Ω—Ç 2: –Ω–∞–ø—Ä—è–º—É—é ‚Äî /grantpremium <userId> <days>
                parts.size >= 3 -> {
                    val target = parts[1].toLongOrNull()
                    val days = parts[2].toIntOrNull()
                    if (target == null || days == null || days <= 0) {
                        api.sendMessage(chatId, "–§–æ—Ä–º–∞—Ç: /grantpremium <userId> <days>")
                        return
                    }
                    PremiumRepo.grantDays(target, days)
                    val until = PremiumRepo.getUntil(target)
                    val untilStr = until?.let { dtf.format(Instant.ofEpochMilli(it)) } ?: "‚Äî"
                    api.sendMessage(chatId, "–û–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $target –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—É–º –Ω–∞ $days –¥–Ω. –î–æ: $untilStr")
                }

                else -> {
                    api.sendMessage(chatId, "–§–æ—Ä–º–∞—Ç—ã:\n‚Äî –ø–æ reply: /grantpremium <days>\n‚Äî –Ω–∞–ø—Ä—è–º—É—é: /grantpremium <userId> <days>")
                }
            }
            return
        }

        // ===== –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–∞—Ö =====
        when (state[chatId]) {
            BotState.AWAITING_CALORIE_INPUT ->
                if (!lower.startsWith("/")) {
                    handleCalorieInput(chatId, msg.text ?: ""); return
                }

            BotState.AWAITING_PRODUCT_INPUT ->
                if (!lower.startsWith("/")) {
                    handleProductInput(chatId, msg.text ?: ""); return
                }

            else -> {}
        }

        // ===== –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
        when (lower) {
            "/start" -> {
                api.deleteMessage(chatId, msgId)
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                api.sendPhotoResource(
                    chatId = chatId,
                    resourcePath = START_IMAGE_RES,
                    caption = START_GREETING_RU,
                    replyMarkup = inlineMenu()
                )
            }
            "/recipes" -> {
                mode[chatId] = PersonaMode.CHEF
                state.remove(chatId)
                api.sendMessage(chatId, CHEF_INPUT_PROMPT)
            }
            "/caloriecalculator" -> {
                mode[chatId] = PersonaMode.CALC
                state[chatId] = BotState.AWAITING_CALORIE_INPUT
                api.sendMessage(chatId, CALORIE_INPUT_PROMPT)
            }
            "/productinfo" -> {
                mode[chatId] = PersonaMode.PRODUCT
                state[chatId] = BotState.AWAITING_PRODUCT_INPUT
                api.sendMessage(chatId, PRODUCT_INPUT_PROMPT)
            }
            "/help" -> api.sendMessage(chatId, HELP_TEXT)
            else -> when (mode[chatId] ?: PersonaMode.CHEF) {
                PersonaMode.CHEF -> handleChef(chatId, msg.text ?: "")
                PersonaMode.CALC -> handleCalorieInput(chatId, msg.text ?: "")
                PersonaMode.PRODUCT -> handleProductInput(chatId, msg.text ?: "")
            }
        }
    }

    private fun handleChef(chatId: Long, userText: String) {
        val sys = ChatMessage("system", PersonaPrompt.system())
        val user = ChatMessage("user", userText)
        val reply = llm.complete(listOf(sys, user))
        api.sendMessage(chatId, reply)
    }

    private fun handleCalorieInput(chatId: Long, userText: String) {
        val sys = ChatMessage("system", CalorieCalculatorPrompt.SYSTEM)
        val user = ChatMessage("user", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userText")
        val reply = llm.complete(listOf(sys, user))
        api.sendMessage(chatId, reply)
        state.remove(chatId)
    }

    private fun handleProductInput(chatId: Long, userText: String) {
        val sys = ChatMessage("system", ProductInfoPrompt.SYSTEM)
        val user = ChatMessage("user", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: $userText")
        val reply = llm.complete(listOf(sys, user))
        api.sendMessage(chatId, reply)
        state.remove(chatId)
    }

    private fun inlineMenu(): InlineKeyboardMarkup =
        InlineKeyboardMarkup(
            inline_keyboard = listOf(
                listOf(InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç—ã", CB_RECIPES)),
                listOf(InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π", CB_CALC)),
                listOf(InlineKeyboardButton("–ö–ë–ñ–£ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞", CB_PRODUCT)),
                listOf(InlineKeyboardButton("–ü–æ–º–æ—â—å", CB_HELP))
            )
        )
}
